{"pageProps":{"projectName":"Rococo","currentAdr":{"slug":"20240611-rococo-standard-id","package":null,"title":"Rococo's standard ID","status":"accepted","supersededBy":null,"tags":[],"deciders":[],"body":{"enhancedMdx":"\n## Context and Problem Statement\n\nWe have multiple \"standards\" when it comes to `entity_id` and related ID values. The original intention was to use native Python UUIDs. There have been a lot of errors and discussions around converting those to strings with and without dashes.\n\nWe want to be able to generate an ID anywhere (including the browser) and have it be unique, however it only needs to be unique for a given model/object/data-type.  \n\nHaving the same entity_id for a Person and for a Team is weird, but it's acceptable.  \nMost of our services use UUID v4 (fully random, not sortable).  \n\n## Considered Options\n\n- Native Python UUIDs\n- string in Stripe ID format\n- string [UUIDv7](https://www.rfc-editor.org/rfc/rfc9562#name-uuid-version-7)\n- string [distributed global IDs from here](https://medium.com/bytebytego-system-design-alliance/7-famous-approaches-to-generate-distributed-id-with-comparison-table-af89afe4601f#:~:text=Easy%20to%20Scale-,Approaches,-%3A), notably Twitter’s Snowflake, Sonyflake, Baidu UID generator\n\n\n## Decision Outcome\n\n**Chosen option:**\nOur standard ID is a 32 character string generated by using a Type 4 UUID converted to hex with dashes removed.\n\nRococo library should provide an API to generate the ID (e.g. a `generate_id()` function).\n\n**Why:**\n - This is the easiest to implement at the moment.\n - Disk space and performance concerns are negligible in the current production projects. It is acceptable to use non-sequential IDs.\n - Rococo doesn't impose constraints on the ID string length and is not expected to do so in the future. So using a different ID is possible if a new project requires it for performance, scalability or other purposes.\n - Converting to Hex is an optimization (at least for MySql)\n\n## Pros and Cons of the Options\nCollected from the Slack discussion in the `rococo` channel\n\nAll reviewed options posess sufficient uniquiness to serve as a unique id which can be generated anywhere.\n\n### Native Python UUIDs (`uuid.uuid4()`)\n\n**Pros:**\n- API familiar to all Python developers (and most of our services are written in Python).\n\n**Cons:**\n- Not supported natively by some of the database APIs we use, will require additional conversion on the database repository level.\n\n### UUIDv4 string\n\n**Pros:**\n- Simple format, known to most of the developers. (Not much to mention here).\n\n**Cons:**\nUUID v4 are randomly-generated and do not contain any information about the time they are created or the machine that generated them.\n\nAs such, they have no locality: writes and reads will occur all over the index (no matter what index data structure you have).\n\nWith random identifiers, the working set eventually becomes all of the data and your database will be page faulting continuously on large data sets.\n\n### UUIDv7 string\n\n**Pros:**  \n\nUUID v7 are monothonically increasing (they use a 48-bit timestamp in milliseconds since the Unix Epoch, filling the rest with random data).\n\nThis is to get sortability and thus better indexing / sharding in the database.\n\nThe key advantage of UUIDv7’s is that they enable temporal locality, so when your database needs to check uniqueness constraints (for idempotent processing), only a small portion of the index will be hot (recent items). \n\n**Cons:**  \nMarginally worse uniqueness (48 bit timestamp against 48 random bit in UUID v4).\n\n### Snowflake, Sonyflake, Baidu UID generator\n\n**Pros:**\nCompared to UUIDv4, distributed global ids provide better performance due to the sortability and temporal locality (same as UUID v7).  \nThey also occupy less space on disk - e.g. Snowflake ID occupies 64 bit, while UUID v4 / v7 occupies 128 bit.\n\n**Cons:**\nSlightly more complex to implement, compared to UUID v4 / v7\n\n### Stripe ID (string)\n\n**Pros:**\n- Easy to debug.\n- No dashes = double click selection\n\n**Cons:** were not mentioned\n\n## Links\n\n- [Optimized UUIDs in MySql](https://stitcher.io/blog/optimised-uuids-in-mysql#:~:text=Saving%20UUIDs%20as%20binary%20data,plotting%20a%20much%20faster%20result)\n- [MySql & UUIDs](https://lefred.be/content/mysql-uuids/)\n- [Benchmark: Snowflake vs UUIDv4](https://dev.to/josethz00/benchmark-snowflake-vs-uuidv4-2h80)"},"creationDate":"2024-06-11T11:04:21.000Z","lastEditDate":"2024-06-11T11:04:21.000Z","lastEditAuthor":"anikiforov","publicationDate":"2024-05-09T23:59:59.000Z","file":{"relativePath":"docs/decisions/20240611-rococo-standard-id.md","absolutePath":"/home/runner/work/rococo/rococo/docs/decisions/20240611-rococo-standard-id.md"},"repository":{"provider":"github","viewUrl":"https://github.com/EcorRouge/rococo/blob/master/docs/decisions/20240611-rococo-standard-id.md"}},"l4bVersion":"1.0.1"},"__N_SSG":true}